import 'package:flutter/material.dart';

class About {
  final String question;
  final String answer;
  About({@required this.question, @required this.answer});
}

String string="No Name";
List<About> names = [
  About(
      question: 'C Programming Language',
      answer: "C Programming Language:"
          "\n\n C programming is a general-purpose,procedural,imperative computer programming language developed in 1972 by Dennis M. Ritchie at the Bell Telephone Laboratories to develop the UNIX operating system. C is the most widely used computer language. It keeps fluctuating at number one scale of popularity along with Java programming language, which is also equally popular and most widely used among modern software programmers."
  ),
  About(
      question: 'Why to Learn C Programming?',
      answer: "Why to Learn C Programming?:"
          "\n\n C programming language is a MUST for students and working professionals to become a great Software Engineer specially when they are working in Software Development Domain .I will list down some of the key advantages of learning C Programming:"
          "\n\n•	Easy to learn"
          "\n•	Structured language"
          "\n•	It produces efficient programs"
          "\n•	It can handle low-level activities"
          "\n•	It can be compiled on a variety of computer platforms"
  ),
  About(
      question: 'Facts about C',
      answer: "Facts about C:"
          "\n\n •	C was invented to write an operating system called UNIX."
          "\n•	C is a successor of B language which was introduced around the early 1970s."
          "\n•	The language was formalized in 1988 by the American National Standard Institute (ANSI)."
          "\n•	The UNIX OS was totally written in C."
          "\n•	Today C is the most widely used and popular System Programming Language."
          "\n•	Most of the state-of-the-art software have been implemented using C."
  ),
  About(
      question: 'Hello World using C Programming.',
      answer: "Hello World using C Programming."
          "\n\n Just to give you a little excitement about C programming, I'm going to give you "
          "a small conventional C Programming Hello World program, You can try it using Demo link."
          "\n\n #include <stdio.h>"
          "\n int main() {"
          "\n /* my first program in C */"
          "\n printf('Hello, World!' )"
          "\n return 0;"
          "\n }"
  ),
  About(
      question: 'Applications of C Programming',
      answer: "Applications of C Programming:"
          "\n\n C was initially used for system development work, particularly the programs that make-up the operating system. C was adopted as a system "
          "development language because it produces code that runs nearly as fast "
          "as the code written in assembly language. Some examples of the use of C are -"
          "\n\n •	Operating Systems"
          "\n •	Language Compilers"
          "\n •	Assemblers"
          "\n •	Text Editors"
          "\n •	Print Spoolers"
          "\n •	Network Drivers"
          "\n •	Modern Programs"
          "\n •	Databases"
          "\n •	Language Interpreters"
          "\n •	Utilities"
  ),
  About(
      question: 'C - Environment Setup',
      answer: "C - Environment Setup:"
          "\n\n If you want to set up your environment for C programming language, you need the following two "
          "software tools available on your computer, (a) Text Editor and (b) The C Compiler."
          "\n\n (a)Text Editor:"
          "\n\n • This will be used to type your program. Examples of few a editors include Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi."
          "\n\n • The name and version of text editors can vary on different operating systems. For example, Notepad will be used on Windows, and vim or vi can be used on windows as well as on Linux or UNIX."
          "\n\n • The files you create with your editor are called the source files and they contain the program source codes. The source files for C programs are typically named with the extension '.c'"
          "\n\n • Before starting your programming, make sure you have one text editor in place and you have enough experience to write a computer program, save it in a file, compile it and finally execute it."
          "\n\n\n (b) The C Compiler:"
          "\n\n The source code written in source file is the human readable source for your program. It needs to be 'compiled', into machine language so that y our CPU can actually execute the program as per the instructions given."
          "\n\n The compiler compiles the source codes into final executable programs. The most frequently used and free available compiler is the GNU C/C++ compiler, otherwise you can have compilers either from HP or Solaris if you have the respective operating systems."
          "\n\n The following section explains how to install GNU C/C++ compiler on various OS. We keep mentioning C/C++ together because GNU gcc compiler works for both C and C++ programming languages."
  ),
  About(
      question: 'C - Program Structure',
      answer: "C - Program Structure:"
          "\n\n Hello World Example:"
          "\n A C program basically consists of the following parts −"
          "\n •	Preprocessor Commands"
          "\n •	Functions"
          "\n •	Variables"
          "\n •	Statements & Expressions"
          "\n •	Comments"
          "\n\n Let us look at a simple code that would print the words 'Hello World' −"
          "\n #include <stdio.h>"
          "\n int main() {"
          "\n /* my first program in C */"
          "\n printf('Hello, World! ');"
          "\n return 0;"
          "\n }"
          "\n\n Let us take a look at the various parts of the above program − "
          "\n\n •	The first line of the program #include <stdio.h> is a preprocessor command, which tells a C compiler to include stdio.h file before going to actual compilation. "
          "\n\n •	The next line int main() is the main function where the program execution begins."
          "\n\n •	The next line /*...*/ will be ignored by the compiler and it has been put to add additional comments in the program. So such lines are called comments in the program."
          "\n\n •	The next line printf(...) is another function available in C which causes the message 'Hello', World! to be displayed on the screen."
          "\n\n •	The next line return 0; terminates the main() function and returns the value 0."

  ),
  About(
      question: 'Compile and Execute C Program',
      answer: "Compile and Execute C Program:"
          "\n\n Let us see how to save the source code in a file, and how to compile and run it. Following are the simple steps −"
          "\n\n •	Open a text editor and add the above-mentioned code."
          "\n •	Save the file as hello.c"
          "\n •	Open a command prompt and go to the directory where you have saved the file."
          "\n •	Type gcc hello.c and press enter to compile your code."
          "\n • prompt will take you to the next line and would generate a.out executable file."
          "\n •	Now, type a.out to execute your program."
          "\n •	You will see the output 'Hello World' printed on the screen."
  ),

  About(
      question: 'C - Basic Syntax',
      answer: "C - Basic Syntax:"
          "\n\n Tokens in C:"
          "\n A C program consists of various tokens and a token is either a keyword, an identifier, a constant, a string literal, or a symbol. For example, the following C statement consists of five tokens −"
          "\n printf('Hello, World!');"
          "\n\n The individual tokens are −"
          "\n printf"
          "\n ("
          "\n 'Hello, World!'"
          "\n );"
          "\n\n\n Semicolons:"
          "\n In a C program, the semicolon is a statement terminator. That is, each individual statement must be ended with a semicolon. It indicates the end of one logical entity."
          "\n\n Given below are two different statements −"
          "\n\n printf('Hello, World! ');"
          "\n return 0;"
          "\n\n\n Comments:"
          "\n Comments are like helping text in your C program and they are ignored by the compiler. They start with /* and terminate with the characters */ as shown below −"
          "\n /* my first program in C */"
          "\n You cannot have comments within comments and they do not occur within a string or character literals."
          "\n\n\n Identifiers: "
          "\n A C identifier is a name used to identify a variable, function, or any other user-defined item. An identifier starts with a letter A to Z, a to z, or an underscore '_' followed by zero or more letters, underscores, and digits (0 to 9)."
          "\n C does not allow punctuation characters such as @ s and % within identifiers. C is a case-sensitive programming language. Thus, Manpower and manpower are two different identifiers in C. Here are some examples of acceptable identifiers −"
          "\n\n mohd       zara     abc    move_name"
          "\n a_123"
          "\n myname50   _temp    j      a23b9"
          "\n retVal"
          "\n\n\n Keywords: "
          "\n The following list shows the reserved words in C. These reserved words may not be used as constants or variables or any other identifier names."
          "\n\n auto	       else	     long	        switch"
          "\n break	     enum	   register  typedef"
          "\n case	       extern	 return	    union"
          "\n char	       float	     short	     unsigned"
          "\n const	      for	       signed	    void"
          "\n continue	  goto	   sizeof	   volatile"
          "\n default	   if	          static	     while"
          "\n do	          int	         struct	     _Packed"
          "\n double"
  ),
  About(
      question: 'C - Data Types',
      answer: "C - Data Types:"
          "\n\n Data types in c refer to an extensive system used for declaring variables or functions of different types. The type of a variable determines how much space it occupies in storage and how the bit pattern stored is interpreted.The types in C can be classified as follows −"
          "\n\n Types & Description:"
          "\n (1)Basic Types:"
          "\n They are arithmetic types and are further classified into: "
          "\n (a) integer types and (b) floating-point types."
          "\n\n (2)Enumerated types :"
          "\n They are again arithmetic types and they are used to define variables that can only assign certain discrete integer values throughout the program."
          "\n\n (3)The type void: "
          "\n The type specifier void indicates that no value is available."
          "\n\n (4)Derived types: "
          "\n They include (a) Pointer types, (b) Array types, (c) Structure types, (d) Union types and (e) Function types."
          "\n\n The array types and structure types are referred collectively as the aggregate types. The type of a function specifies the type of the function's return value. We will see the basic types in the following section, where as other types will be covered in the upcoming chapters."
          "\n\n\n(a) Integer Types :"
          "\n This C explains how to declare and use integer variables with syntax and examples."
          "\n There are the following integer types available in the C Language:"
          "\n\n • short int"
          "\n • unsigned short int"
          "\n • int"
          "\n • unsigned int"
          "\n • long int"
          "\n • unsigned long int"
          "\n\n (b)Floating-Point Types:"
          "\n (1)Float:"
          "\n Float is a datatype which is used to represent the floating point numbers. It is a 32-bit IEEE 754 single precision floating point number ( 1-bit for the sign, 8-bit for exponent, 23*-bit for the value. It has 6 decimal digits of precision."
          "\n Here is the syntax of float in C language,"
          "\n float variable_name;"
          "\n\n (2)Double:"
          "\n Double is also a datatype which is used to represent the floating point numbers. It is a 64-bit IEEE 754 double precision floating point number for the value. It has 15 decimal digits of precision."
          "\n Here is the syntax of double in C language,"
          "\n double variable_name;"
          "\n\n (3)long double: "
          "\n In C and related programming languages, long double refers to a floating-point data type that is often more precise than double precision though the language standard only requires it to be at least as precise as double."
          "\n\n\n (c)The void Type:"
          "\n The void type specifies that no value is available. It is used in three kinds of situations −"
          "\n\n (1)Function returns as void:"
          "\n There are various functions in C which do not return any value or you can say they return void. A function with no return value has the return type as void. For example, void exit (int status);"
          "\n\n (2)Function arguments as void: "
          "\n There are various functions in C which do not accept any parameter. A function with no parameter can accept a void. For example, int rand(void);"
          "\n\n (3)Pointers to void:"
          "\n A pointer of type void * represents the address of an object, but not its type. For example, a memory allocation function void *malloc( size_t size ); returns a pointer to void which can be casted to any data type."
  ),
  About(
      question: 'C - Variables',
      answer: "C - Variables:"
          "\n\n Variable Definition in C:"
          "\n A variable definition tells the compiler where and how much storage to create for the variable. A variable definition specifies a data type and contains a list of one or more variables of that type as follows −"
          "\n type variable_list;"
          "\n Here, type must be a valid C data type including char, w_char, int, float, double, bool, or any user-defined object; and variable_list may consist of one or more identifier names separated by commas. Some valid declarations are shown here −"
          "\n int    i, j, k;"
          "\n char   c, ch;"
          "\n float  f, salary;"
          "\n double d;"
          "\n\n The line int i, j, k; declares and defines the variables i, j, and k; which instruct the compiler to create variables named i, j and k of type int."
          "\n\n Variables can be initialized (assigned an initial value) in their declaration. The initializer consists of an equal sign followed by a constant expression as follows −"
          "\n type variable_name = value;"
          "\n Some examples are −"
          "\n extern int d = 3, f = 5;    // declaration of d & f"
          "\n int d = 3, f = 5;           // definition and "
          "\n initializing d and f. "
          "\n byte z = 22;"
          "\n initializes z. "
          "\n char x = 'x';               // the variable x "
          "\n has the value 'x'."
          "\n\n\n Variable Declaration in C: "
          "\n A variable declaration is useful when you are using multiple files and you define your variable in one of the files which will be available at the time of linking of the program. You will use the keyword extern to declare a variable at any place. Though you can declare a variable multiple times in your C program, it can be defined only once in a file, a function, or a block of code."
          "\n\n Examples:"
          "\n\n #include <stdio.h>"
          "\n // Variable declaration:"
          "\n int main () {"
          "\n  int a, b;"
          "\n  int c;"
          "\n float f;"
          "\n /* actual initialization */"
          "\n a = 10;"
          "\n b = 20;"
          "\n c = a + b;"
          "\n printf('value of c : %d', c);"
          "\n f = 70.0/3.0;"
          "\n printf('value of f : %f ', f);"
          "\n return 0;"
          "\n }"
          "\n\n When the above code is compiled and executed, it produces the following result −"
          "\n value of c : 30"
          "\value of f : 23.333334"
  ),
  About(
      question: 'C - Operators',
      answer: "C - Operators:"
          "\n\n An operator is a symbol that tells the compiler to perform specific mathematical or logical functions. C language is rich in built-in operators and provides the following types of operators −"
          "\n\n • Arithmetic Operators"
          "\n • Relational Operators"
          "\n • Logical Operators"
          "\n • Bitwise Operators"
          "\n • Assignment Operators"
          "\n • Misc Operators"

          "\n\n\n (1)Arithmetic Operators:"
          "\n '+' operator: adds two operands"
          "\n '-' operator: subtract second operands from first"
          "\n '*' operator:  multiply two operand"
          "\n '/'	operator: divide numerator by denominator"
          "\n '%'	operator: remainder of division"
          "\n'++' operator: Increment operator - increases integer value by one"
          "\n'--' operator: Decrement operator - decreases integer value by one"
          "\n "
          "\n\n (2) Relational operators:"
          "\n The following table shows all relation operators supported by C:"

          "\n\n == Operator: Check if two operand are equal "
          "\n !=	 Operator: Check if two operand are not equal."
          "\n >	   Operator: Check if operand on the left is greater than operand on the right"
          "\n <	   Operator: Check operand on the left is smaller than right operand"
          "\n >=	 Operator:check left operand is greater than or equal to right operand"
          "\n <=	 Operator: Check if operand on left is smaller than or equal to right operand"
          "\n"
          "\n\n (3)Logical operators:"
          "\n C language supports following 3 logical operators. Suppose a = 1 and b = 0,"
          "\n\n OPERATOR	  DESCIRPTION	    EXAMPLE"
          "\n\n&&	           Logical AND	     (a && b) is false"
          "\n ||	              Logical OR	            (a || b) is true"
          "\n !	               Logical NOT	          (!a) is false"
          "\n\n\n (4)Bitwise operators:"
          "\n The C programming language, operations can be performed on a bit level using bitwise operators."
          "\n Bitwise operations are contrasted by byte-level operations which characterize the bitwise operators' logical counterparts, the AND, OR and NOT operators. Instead of performing on individual bits, byte-level operators perform on strings of eight bits (known as bytes) at a time. The reason for this is that a byte is normally the smallest unit of addressable memory (i.e. data with a unique memory address)."

          "\n\n\n (5)Assignment Operators: "
          "\n Below is the list of Assignment operators in C: "
          "\n\n • The simple assignment operator (=): "
          "\n This operator Assigns values from the right operands to the left operand. "
          "\n\n • Add AND operator (+=):"
          "\n This operator adds the right operand to the left operand and assigns the output to the left operand."
          "\n\n • Subtract AND operator (-=):"
          "\n This operator subtracts the right operand from the left operand and assigns the result to the left operand."
          "\n\n • Multiply AND operator (*=): "
          "\n This operator multiplies the right operand with the left operand and assigns the result to the left operand."
          "\n\n • Divide AND operator (/=): "
          "\n This operator divides the left operand with the right operand and assigns the result to the left operand."
          "\n\n • Modulus AND operator (%=): "
          "\n This operator takes modulus using two operands and assigns the result to the left operand."

          "\n\n\n (6)Misc Operators ↦ sizeof & ternary:"
          "\n Besides the operators discussed above, there are a few other important operators including sizeof and ? : supported by the C Language."

          "\n\n\n Operators Precedence in C:"
          "\n Operator precedence determines the grouping of terms in an expression and decides how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has a higher precedence than the addition operator."
          "\n For example, x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has a higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7."
  ),

  About(
      question: 'C - Decision Making',
      answer: "C - Decision Making:"
          "\n\n Decision making structures require that the programmer specifies one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false."
          "\n C programming language assumes any non-zero and non-null values as true, and if it is either zero or null, then it is assumed as false value."
          "\n C programming language provides the following types of decision making statements:"
          "\n\n (1)if statement:"
          "\n An if statement consists of a boolean expression followed by one or more statements."
          "\n\n (2)if...else statement:"
          "\n An if statement can be followed by an optional else statement, which executes when the Boolean expression is false."
          "\n\n (3)nested if statements:"
          "\n You can use one if or else if statement inside another if or else if statement(s)."
          "\n\n (4)switch statement: "
          "\n A switch statement allows a variable to be tested for equality against a list of values."
          "\n\n (5)nested switch statements: "
          "\n You can use one switch statement inside another switch statement(s)."
  ),
  About(
      question: 'C - Loops',
      answer: "C - Loops:"
          "\n\n You may encounter situations, when a block of code needs to be executed several number of times. In general,C"
          "in a function is executed first, followed by the second, and so on."
          "\n Programming languages provide various control structures that allow for more complicated execution paths."
          "\n A loop statement allows us to execute a statement or group of statements multiple times. Given below is the general form of a loop statement in most of the programming languages –"
          "\n C programming language provides the following types of loops to handle looping requirements."
          "\n\n (1)while loop: "
          "\n Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body."
          "\n\n (2)for loop:"
          "\n Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable."
          "\n\n (3)do...while loop:"
          "\n It is more like a while statement, except that it tests the condition at the end of the loop body."
          "\n\n (4)nested loops:"
          "\n You can use one or more loops inside any other while, for, or do..while loop."

          "\n\n\n Loop Control Statements:"
          "\n Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed."
          "\n C supports the following control statements:"
          "\n\n (1)break statement: "
          "\n Terminates the loop or switch statement and transfers execution to the statement immediately following the loop or switch."
          "\n\n (2)continue statement: "
          "\n Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating."
          "\n\n (3)goto statement:"
          "\n Transfers control to the labeled statement."

          "\n\n\n The Infinite Loop: "
          "\n A loop becomes an infinite loop if a condition never becomes false. The for loop is traditionally used for this purpose. Since none of the three expressions that form the 'for' loop are required, you can make an endless loop by leaving the conditional expression empty."
          "\n\n #include <stdio.h>"
          "\n int main () {"
          "\n for( ; ; ) {"
          "\n printf('This loop will run forever');"
          "\n }"
          "\n return 0;"
          "\n }"
          "\n\n When the conditional expression is absent, it is assumed to be true. You may have an initialization and increment expression, but C programmers more commonly use the for(;;) construct to signify an infinite loop."
  ),
  About(
      question: 'C - Functions',
      answer: "C - Functions:"
          "\n\n A function is a group of statements that together perform a task. Every C program has at least one function, which is main(), and all the most trivial programs can define additional functions."
          "\n\n You can divide up your code into separate functions. How you divide up your code among different functions is up to you, but logically the division is such that each function performs a specific task."
          "\n\n A function declaration tells the compiler about a function's name, return type, and parameters. A function definition provides the actual body of the function."
          "\n\n The C standard library provides numerous built-in functions that your program can call. For example, strcat() to concatenate two strings, memcpy() to copy one memory location to another location, and many more functions."
          "\n\n A function can also be referred as a method or a sub-routine or a procedure, etc"

          "\n\n\n Defining a Function:"
          "\n The general form of a function definition in C programming language is as follows −"
          "\n\n return_type function_name( parameter list ) "
          "\n {"
          "\n body of the function"
          "\n }"
          "\n\n A function definition in C programming consists of a function header and a function body. Here are all the parts of a function −"
          "\n •	Return Type :− "
          "\n A function may return a value. The return_type is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword void."
          "\n\n •	Function Name :− "
          "\n This is the actual name of the function. The function name and the parameter list together constitute the function signature."
          "\n\n •	Parameters :−"
          "\n A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters."
          "\n\n •	Function Body :− "
          "\n The function body contains a collection of statements that define what the function does."
          "\n\n Example: "
          "\n Given below is the source code for a function called max(). This function takes two parameters num1 and num2 and returns the maximum value between the two −"
          "\n\n int max(int num1, int num2) {"
          "\n int result;"
          "\n    if (num1 > num2)"
          "\n result = num1;"
          "\n    else"
          "\n result = num2;"
          "\n return result; "
          "\n }"

          "\n\n\n Function Declarations:"
          "\n A function declaration tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately."
          "\n A function declaration has the following parts −"
          "\n\n return_type function_name( parameter list );"
          "\n\n For the above defined function max(), the function declaration is as follows −"
          "\n\n int max(int num1, int num2);"
          "\n Parameter names are not important in function declaration only their type is required, so the following is also a valid declaration −"
          "\n int max(int, int);"
          "\n\n Function declaration is required when you define a function in one source file and you call that function in another file. In such case, you should declare the function at the top of the file calling the function."

          "\n\n\n Calling a Function: "
          "\n While creating a C function, you give a definition of what the function has to do. To use a function, you will have to call that function to perform the defined task."
          "\n\n When a program calls a function, the program control is transferred to the called function. A called function performs a defined task and when its return statement is executed or when its function-ending closing brace is reached, it returns the program control back to the main program."
          "\n\n To call a function, you simply need to pass the required parameters along with the function name, and if the function returns a value, then you can store the returned value. For example − "
          "\n\n int add(int num1, int num2)  "
          "\n {"
          "\n return (num1 + num2); "
          "\n }"
          "\n int main() "
          "\n {"
          "\n int num1 = 12, num2 = 34; "
          "\n printf(add(num1, num2));"
          "\n return 0; "
          "\n } "

          "\n\n\n Function Arguments:"
          "\n If a function is to use arguments, it must declare variables that accept the values of the arguments. These variables are called the formal parameters of the function."
          "\n Formal parameters behave like other local variables inside the function and are created upon entry into the function and destroyed upon exit."
          "\n While calling a function, there are two ways in which arguments can be passed to a function −"
          "\n\n (1)Call by value: "
          "\n This method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument."
          "\n\n (2)Call by reference:"
          "\n This method copies the address of an argument into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument."
  ),
  About(
      question: 'C - Arrays',
      answer: "C - Arrays:"
          "\n\n Arrays a kind of data structure that can store a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type."
          "\n Instead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables. A specific element in an array is accessed by an index. "

          "\n All arrays consist of contiguous memory locations. The lowest address corresponds to the first element and the highest address to the last element."
          "\n\n\n Declaring Arrays:"
          "\n To declare an array in C, a programmer specifies the type of the elements and the number of elements required by an array as follows −"
          "\n\n type arrayName [ arraySize ];"
          "\n This is called a single-dimensional array. The arraySize must be an integer constant greater than zero and type can be any valid C data type. For example, to declare a 10-element array called balance of type double, use this statement −"
          "\n\n double balance[10]; "
          "\n Here balance is a variable array which is sufficient to hold up to 10 double numbers."

          "\n\n\n Initializing Arrays:"
          "\n You can initialize an array in C either one by one or using a single statement as follows −"
          "\n\n double balance[5] = {10.0, 2.0, 3.4, 7.0, 5.0}; "
          "\n The number of values between braces { } cannot be larger than the number of elements that we declare for the array between square brackets [ ]."
          "\n You will create exactly the same array as you did in the previous example. Following is an example to assign a single element of the array −"
          "\n\n balance[4] = 5.0;"

          "\n\n\n Accessing Array Elements:"
          "\n An element is accessed by indexing the array name. This is done by placing the index of the element within square brackets after the name of the array. For example −"
          "\n\n double salary = balance[9]; "
          "\n\n\n The above statement will take the 10th element from the array and assign the value to salary variable. The following example Shows how to use all the three above mentioned concepts viz. declaration, assignment, and accessing arrays − "
          "\n #include <stdio.h>"
          "\n int main() {"
          "\n int array[5] = {1, 2, 3, 4, 5};"
          "\n for(int loop = 0; loop < 10; loop++)"
          "\n printf('%d ', array[loop]);"
          "\n }"

          "\n\n\n Arrays in Detail:"
          "\n Arrays are important to C and should need a lot more attention. The following important concepts related to array should be clear to a C programmer −"
          "\n (1)Multi-dimensional arrays:"
          "\n C supports multidimensional arrays. The simplest form of the multidimensional array is the two-dimensional array."
          "\n\n (2)Passing arrays to functions:"
          "\n You can pass to the function a pointer to an array by specifying the array's name without an index."
          "\n\n (3)Return array from a function: "
          "\n C allows a function to return an array."
          "\n\n (4)Pointer to an array: "
          "\n You can generate a pointer to the first element of an array by simply specifying the array name, without any index."
  ),
  About(
      question: 'Strings in C',
      answer: "Strings in C:"
          "\n\n Strings are defined as an array of characters. The difference between a character array and a string is the string is terminated with a special character ‘\0’."
          "\n\n Declaration of strings: "
          "\n Declaring a string is as simple as declaring a one dimensional array. Below is the basic syntax for declaring a string."
          "\n char str_name[size];"
          "\n\n Initializing a String:"
          "\n A string can be initialized in different ways. We will explain this with the help of an example. Below is an example to declare a string with name as str and initialize it with “GeeksforGeeks”."
          "\n char str[] = 'GeeksforGeeks';"
          "\n\n Let us now look at a sample program to get a clear understanding of declaring and initializing a string in C and also how to print a string."
          "\n\n int main() "
          "\n {"
          "\n // declare and initialize string "
          "\n  char str[] = 'Geeks';"
          "\n printf('%s',str); "
          "\n return 0; "
          "\n }"
  ),
  About(
      question: 'Recursion in C',
      answer: "Recursion in C:"
          "\n\n Recursion is the process of repeating items in a self-similar way. In programming languages, if a program allows you to call a function inside the same function, then it is called a recursive call of the function."
          "\n\n void recursion()  "
          "\n {"
          "\n recursion();"
          "\n } /* function calls itself */"
          "\n int main()"
          "\n {"
          "\n recursion();"
          "\n }"
          "\n\n The C programming language supports recursion, i.e., a function to call itself. But while using recursion, programmers need to be careful to define an exit condition from the function, otherwise it will go into an infinite loop. "
          "\n Recursive functions are very useful to solve many mathematical problems, such as calculating the factorial of a number, generating Fibonacci series, etc."
  ),

];
