import 'package:flutter/material.dart';

class CpAbout {
  final String question;
  final String answer;
  CpAbout({@required this.question, @required this.answer});
}

String string="No Name";
List<CpAbout> names = [

  CpAbout(
      question: "C++ programming Language",
      answer: "C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural, object-oriented, and generic programming."
          "\n C++ is regarded as a middle-level language, as it comprises a combination of both high-level and low-level language features."
          "\n C++ was developed by Bjarne Stroustrup starting in 1979 at Bell Labs in Murray Hill, New Jersey, as an enhancement to the C language and originally named C with Classes but later it was renamed C++ in 1983."
          "\n C++ is a superset of C, and that virtually any legal C program is a legal C++ program."
          "\n Note − A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time."
          "\n\n Object-Oriented Programming:"
          "\n C++ fully supports object-oriented programming, including the four pillars of object-oriented development −"
          "\n\n •	Encapsulation"
          "\n •	Data hiding"
          "\n •	Inheritance"
          "\n •	Polymorphism"
  ),
  CpAbout(
      question: "Why to Learn C++",
      answer: "C++ is a MUST for students and working professionals to become a great Software Engineer. I will list down some of the key advantages of learning C++:"
          "\n •	C++ is very close to hardware, so you get a chance to work at a low level which gives you lot of control in terms of memory management, better performance and finally a robust software development."
          "\n •	C++ programming gives you a clear understanding about Object Oriented Programming. You will understand low level implementation of polymorphism when you will implement virtual tables and virtual table pointers, or dynamic type identification."
          "\n •	C++ is one of the every green programming languages and loved by millions of software developers. If you are a great C++ programmer then you will never sit without work and more importantly you will get highly paid for your work."
          "\n •	C++ is the most widely used programming languages in application and system programming. So you can choose your area of interest of software development."
          "\n •	C++ really teaches you the difference between compiler, linker and loader, different data types, storage classes, variable types their scopes etc."
          "\n There are 1000s of good reasons to learn C++ Programming. But one thing for sure, to learn any programming language, not only C++, you just need to code, and code and finally code until you become expert."
  ),
  CpAbout(
      question: "Applications of C++ Programming",
      answer: "As mentioned before, C++ is one of the most widely used programming languages. It has it's presence in almost every area of software development. I'm going to list few of them here:"
          "\n\n •	Application Software Development :- C++ programming has been used in developing almost all the major Operating Systems like Windows, Mac OSX and Linux. Apart from the operating systems, the core part of many browsers like Mozilla Firefox and Chrome have been written using C++. C++ also has been used in developing the most popular database system called MySQL."
          "\n\n •	Programming Languages Development:- C++ has been used extensively in developing new programming languages like C#, Java, JavaScript, Perl, UNIX’s C Shell, PHP and Python, and Verilog etc. "
          "\n\n •	Computation Programming:- C++ is the best friends of scientists because of fast speed and computational efficiencies "
          "\n\n •	Games Development:- C++ is extremely fast which allows programmers to do procedural programming for CPU intensive functions and provides greater control over hardware, because of which it has been widely used in development of gaming engines. "
          "\n\n •	Embedded System - C++ is being heavily used in developing Medical and Engineering Applications like softwares for MRI machines, high-end CAD/CAM systems etc. "
          "\n\n This list goes on, there are various areas where software developers are happily using C++ to provide great softwares. I highly recommend you to learn C++ and contribute great softwares to the community."
  ),
  CpAbout(
      question: "C++ Basic Syntax",
      answer: "When we consider a C++ program, it can be defined as a collection of objects that communicate via invoking each other's methods. Let us now briefly look into what a class, object, methods, and instant variables mean."
          "\n\n •	Object:− Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors - wagging, barking, eating. An object is an instance of a class."
          "\n\n •	Class:− A class can be defined as a template/blueprint that describes the behaviors/states that object of its type support."
          "\n\n •	Methods:− A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed."
          "\n\n •	Instance Variables:− Each object has its unique set of instance variables. An object's state is created by the values assigned to these instance variables."
  ),
  CpAbout(
      question: "C++ Program Structure",
      answer: "Let us look at a simple code that would print the words Hello World."
          "\n\n #include <iostream>"
          "\n using namespace std;"
          "\n // main() is where program execution begins"
          "\n int main() "
          "\n {"
          "\n cout << 'Hello World';  // prints Hello World"
          "\n return 0;"
          "\n }"
          "\n\n Let us look at the various parts of the above program − "
          "\n\n •	The C++ language defines several headers, which contain information that is either necessary or useful to your program. For this program, the header <iostream> is needed."
          "\n\n •	The line using namespace std; tells the compiler to use the std namespace. Namespaces are a relatively recent addition to C++."
          "\n\n •	The next line '// main() is where program execution begins.' is a single-line comment available in C++. Single-line comments begin with // and stop at the end of the line."
          "\n\n •	The line int main() is the main function where program execution begins."
          "\n\n •	The next line cout << 'Hello World'; causes the message 'Hello World' to be displayed on the screen."
          "\n\n •	The next line return 0; terminates main( )function and causes it to return the value 0 to the calling process."
  ),
  CpAbout(
      question: "Compile and Execute C++ Program",
      answer: "Let's look at how to save the file, compile and run the program. Please follow the steps given below −"
          "\n\n •	Open a text editor and add the code as above."
          "\n •	Save the file as: hello.cpp"
          "\n •	Open a command prompt and go to the directory where you saved the file."
          "\n •	Type 'g++ hello.cpp' and press enter to compile your code. If there are no errors in your code the command prompt will take you to the next line and would generate a.out executable file."
          "\n •	Now, type 'a.out' to run your program."
          "\n •	You will be able to see ' Hello World ' printed on the window."
  ),
  CpAbout(
      question: "C++ Identifiers",
      answer: "A C++ identifier is a name used to identify a variable, function, class, module, or any other user-defined item. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores, and digits (0 to 9)."
          "\n\n C++ does not allow punctuation characters such as @ and % within identifiers. C++ is a case-sensitive programming language. Thus, Manpower and manpower are two different identifiers in C++. "
          "\n\n Here are some examples of acceptable identifiers −"
          "\n\n mohd       zara     abc     move_name    a_123 "
          "\n myname50   _temp    j      a23b9      retVal "
  ),
  CpAbout(
      question: "C++ Keywords",
      answer: "The following list shows the reserved words in C++. These reserved words may not be used as constant or variable or any other identifier names."
          "\n\n asm	      else	      new	        this"
          "\n auto	      enum	      operator	  throw"
          "\n bool	      explicit	  private	    true"
          "\n break	      export	    protected	  try"
          "\n case	      extern	    public	    typedef"
          "\n catch	      false	      register	  typeid"
          "\n char	      float	      reinterpret_cast typename"
          "\n class	      for	        return	    union"
          "\n const	      friend	    short	      unsigned"
          "\n const_cast	goto	      signed	    using"
          "\n continue	  if	        sizeof	    virtual"
          "\n default	    inline	    static	    void"
          "\n delete	     int	        static_cast	volatile"
          "\n do	          long	      struct	    wchar_t"
          "\n double	    mutable	    switch	    while"
          "\n dynamic_cast  namespace	template"
  ),
  CpAbout(
      question: "C++ Data Types",
      answer: "All variables use data-type during declaration to restrict the type of data to be stored. Therefore, we can say that data types are used to tell the variables the type of data it can store. Whenever a variable is defined in C++, the compiler allocates some memory for that variable based on the data-type with which it is declared. Every data type requires a different amount of memory."
          "\n\n Data types in C++ is mainly divided into three types: "

          "\n\n (1)Primitive Data Types: These data types are built-in or predefined data types and can be used directly by the user to declare variables. example: int, char , float, bool etc. Primitive data types available in C++ are: "
          "\n • Integer: Keyword used for integer data types is int. Integers typically requires 4 bytes of memory space and ranges from -2147483648 to 2147483647. "
          "\n\n • Character: Character data type is used for storing characters. Keyword used for character data type is char. Characters typically requires 1 byte of memory space and ranges from -128 to 127 or 0 to 255. "
          "\n\n • Boolean:Boolean data type is used for storing boolean or logical values. A boolean variable can store either true or false. Keyword used for boolean data type is bool. "
          "\n\n • Floating Point:Floating Point data type is used for storing single precision floating point values or decimal values. Keyword used for floating point data type is float. Float variables typically requires 4 byte of memory space.  "
          "\n\n • Double Floating Point: Double Floating Point data type is used for storing double precision floating point values or decimal values. Keyword used for double floating point data type is double. Double variables typically requires 8 byte of memory space.  "
          "\n\n • Valueless or Void:Void means without any value. void datatype represents a valueless entity. Void data type is used for those function which does not returns a value. "
          "\n\n • Wide Character:Wide character data type is also a character data type but this data type has size greater than the normal 8-bit datatype. Represented by wchar_t. It is generally 2 or 4 bytes long."

          "\n\n Example:"
          "\n #include <iostream>"
          "\n using namespace std;"
          "\n // Variable declaration:"
          "\n int main ()"
          "\n {"
          "\n int a=10, b=20,c;"
          "\n float f;"
          "\n // actual initialization"
          "\n c=a+b;"
          "\n cout << c << endl "
          "\n f = 70.0/3.0;"
          "\n cout << f << endl ;"
          "\n    return 0;"
          "\n }"

          "\n\n\n (2)Derived Data Types: The data-types that are derived from the primitive or built-in datatypes are referred to as Derived Data Types. These can be of four types namely: "
          "\n • Function"
          "\n • Array"
          "\n • Pointer"
          "\n • Reference"

          "\n\n\n (3)Abstract or User-Defined Data Types: These data types are defined by user itself. Like, defining a class in C++ or a structure. C++ provides the following user-defined datatypes: "
          "\n • Class"
          "\n • Structure"
          "\n • Union"
          "\n • Enumeration"
          "\n • Typedef defined DataType"


  ),
  CpAbout(
      question: 'C++ - Operators',
      answer: "An operator is a symbol that tells the compiler to perform specific mathematical or logical functions. C++ language is rich in built-in operators and provides the following types of operators −"
          "\n\n • Arithmetic Operators"
          "\n • Relational Operators"
          "\n • Logical Operators"
          "\n • Bitwise Operators"
          "\n • Assignment Operators"
          "\n • Misc Operators"

          "\n\n\n (1)Arithmetic Operators:"
          "\n\n • '+' operator: adds two operands"
          "\n\n • '-' operator: subtract second operands from first"
          "\n\n • '*' operator:  multiply two operand"
          "\n\n • '/'	operator: divide numerator by denominator"
          "\n\n • '%'	operator: remainder of division"
          "\n\n • '++' operator: Increment operator - increases integer value by one"
          "\n\n • '--' operator: Decrement operator - decreases integer value by one"

          "\n\n\n (2) Relational operators:"
          "\n The following table shows all relation operators supported by C++:"

          "\n\n • == Operator: Check if two operand are equal "
          "\n\n • !=	 Operator: Check if two operand are not equal."
          "\n\n • >	   Operator: Check if operand on the left is greater than operand on the right"
          "\n\n • <	   Operator: Check operand on the left is smaller than right operand"
          "\n\n • >=	 Operator:check left operand is greater than or equal to right operand"
          "\n\n • <=	 Operator: Check if operand on left is smaller than or equal to right operand"

          "\n\n\n (3)Logical operators:"
          "\n C++ language supports following 3 logical operators. Suppose a = 1 and b = 0,"
          "\n\n OPERATOR	  DESCIRPTION	    EXAMPLE"
          "\n\• n&&	           Logical AND	     (a && b) is false"
          "\n • ||	               Logical OR	            (a || b) is true"
          "\n • !	                Logical NOT	          (!a) is false"
          "\n\n\n (4)Bitwise operators:"
          "\n The C++ programming language, operations can be performed on a bit level using bitwise operators."
          "\n Bitwise operations are contrasted by byte-level operations which characterize the bitwise operators' logical counterparts, the AND, OR and NOT operators. Instead of performing on individual bits, byte-level operators perform on strings of eight bits (known as bytes) at a time. The reason for this is that a byte is normally the smallest unit of addressable memory (i.e. data with a unique memory address)."

          "\n\n\n (5)Assignment Operators: "
          "\n Below is the list of Assignment operators in C++: "
          "\n\n • The simple assignment operator (=): "
          "\n This operator Assigns values from the right operands to the left operand. "
          "\n\n • Add AND operator (+=):"
          "\n This operator adds the right operand to the left operand and assigns the output to the left operand."
          "\n\n • Subtract AND operator (-=):"
          "\n This operator subtracts the right operand from the left operand and assigns the result to the left operand."
          "\n\n • Multiply AND operator (*=): "
          "\n This operator multiplies the right operand with the left operand and assigns the result to the left operand."
          "\n\n • Divide AND operator (/=): "
          "\n This operator divides the left operand with the right operand and assigns the result to the left operand."
          "\n\n • Modulus AND operator (%=): "
          "\n This operator takes modulus using two operands and assigns the result to the left operand."

          "\n\n\n (6)Misc Operators ↦ sizeof & ternary:"
          "\n Besides the operators discussed above, there are a few other important operators including sizeof and ? : supported by the C Language."

          "\n\n\n Operators Precedence in C++:"
          "\n Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator −"
          "\n For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7."
          "\n Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first."
  ),
  CpAbout(
      question: 'C++ - Decision Making:',
      answer: "Decision making structures require that the programmer specifies one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false."
          "\n C++ programming language assumes any non-zero and non-null values as true, and if it is either zero or null, then it is assumed as false value."
          "\n C++ programming language provides the following types of decision making statements:"
          "\n\n (1)if statement:"
          "\n An if statement consists of a boolean expression followed by one or more statements."
          "\n Example:"
          "\n if (...){// body}"
          "\n\n (2)if...else statement:"
          "\n An if statement can be followed by an optional else statement, which executes when the Boolean expression is false."
          "\n Example:"
          "\n ele if (...){// body}"
          "\n\n (3)nested if statements:"
          "\n You can use one if or else if statement inside another if or else if statement(s)."
          "\n Example:"
          "\n if (...){// body"
          "\n if(...){// body}"
          "\n }"
          "\n\n (4)switch statement: "
          "\n A switch statement allows a variable to be tested for equality against a list of values."
          "\n Example:"
          "\n switch (...){// body}"
          "\n\n (5)nested switch statements: "
          "\n You can use one switch statement inside another switch statement(s)."
          "\n Example:"
          "\n switch (...){// body"
          "\n switch (...){// body}"
          "\n }"

  ),
  CpAbout(
      question: 'C++ - Loops',
      answer: "You may encounter situations, when a block of code needs to be executed several number of times. In general,C++"
          "in a function is executed first, followed by the second, and so on."
          "\n Programming languages provide various control structures that allow for more complicated execution paths."
          "\n A loop statement allows us to execute a statement or group of statements multiple times. Given below is the general form of a loop statement in most of the programming languages –"
          "\n C++ programming language provides the following types of loops to handle looping requirements."
          "\n\n (1)while loop: "
          "\n Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body."
          "\n\n (2)for loop:"
          "\n Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable."
          "\n\n (3)do...while loop:"
          "\n It is more like a while statement, except that it tests the condition at the end of the loop body."
          "\n\n (4)nested loops:"
          "\n You can use one or more loops inside any other while, for, or do..while loop."

          "\n\n\n Loop Control Statements:"
          "\n Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed."
          "\n C++ supports the following control statements:"
          "\n\n (1)break statement: "
          "\n Terminates the loop or switch statement and transfers execution to the statement immediately following the loop or switch."
          "\n\n (2)continue statement: "
          "\n Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating."
          "\n\n (3)goto statement:"
          "\n Transfers control to the labeled statement."

          "\n\n\n The Infinite Loop: "
          "\n A loop becomes an infinite loop if a condition never becomes false. The for loop is traditionally used for this purpose. Since none of the three expressions that form the 'for' loop are required, you can make an endless loop by leaving the conditional expression empty."
          "\n\n #include <iostream>"
          "\n using namespace std;"
          "\n int main () {"
          "\n for( ; ; ) {"
          "\n cout<<('This loop will run forever');"
          "\n }"
          "\n return 0;"
          "\n }"
          "\n When the conditional expression is absent, it is assumed to be true. You may have an initialization and increment expression, but C++ programmers more commonly use the for(;;) construct to signify an infinite loop."
  ),
  CpAbout(
      question: "C++ Functions",
      answer: "A function is a group of statements that together perform a task. Every C++ program has at least one function, which is main(), and all the most trivial programs can define additional functions."
          "\n You can divide up your code into separate functions. How you divide up your code among different functions is up to you, but logically the division usually is such that each function performs a specific task."
          "\n A function declaration tells the compiler about a function's name, return type, and parameters. A function definition provides the actual body of the function."
          "\n The C++ standard library provides numerous built-in functions that your program can call. For example, function strcat() to concatenate two strings, function memcpy() to copy one memory location to another location and many more functions."
          "\n A function is known with various names like a method or a sub-routine or a procedure etc."
          "\n\n\n Defining a Function: "

          "\n\n A C++ function definition consists of a function header and a function body. Here are all the parts of a function − "
          "\n •	Return Type: − A function may return a value. The return_type is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword void."
          "\n\n •	Function Name: − This is the actual name of the function. The function name and the parameter list together constitute the function signature."
          "\n\n •	Parameters: − A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters."
          "\n\n •	Function Body − The function body contains a collection of statements that define what the function does."
          "\n\n The general form of a C++ function definition is as follows −"
          "\n return_type function_name( parameter list ) "
          "\n {"
          "\n //body of the function"
          "\n }"

          "\n\n\n Function Declarations:"
          "\n A function declaration tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately."
          "\n A function declaration has the following parts −"
          "\n\n return_type function_name( parameter list ) "

          "\n\n\n Calling a Function:"
          "\n While creating a C++ function, you give a definition of what the function has to do. To use a function, you will have to call or invoke that function."
          "\n When a program calls a function, program control is transferred to the called function. A called function performs defined task and when it’s return statement is executed or when its function-ending closing brace is reached, it returns program control back to the main program."
          "\n To call a function, you simply need to pass the required parameters along with function name, and if function returns a value, then you can store returned value. For example −"
          "\n\n // Function declaration"
          "\n void myFunction(); "
          "\n // The main method"
          "\n int main() {"
          "\n myFunction();  // call the function"
          "\n  return 0;"
          "\n }"
          "\n // Function definition"
          "\n void myFunction() {"
          "\n cout << 'I just got executed!';"
          "\n }"

          "\n\n\n Function Arguments:"
          "\n If a function is to use arguments, it must declare variables that accept the values of the arguments. These variables are called the formal parameters of the function."
          "\n Formal parameters behave like other local variables inside the function and are created upon entry into the function and destroyed upon exit."
          "\n While calling a function, there are three ways in which arguments can be passed to a function −"
          "\n\n (1)Call by value: "
          "\n This method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument."
          "\n\n (2)Call by Pointer:"
          "\n This method copies the address of an argument into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument."
          "\n\n (3)Call by reference:"
          "\n This method copies the address of an argument into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument."


  ),
  CpAbout(
      question: "C++ Arrays",
      answer: "C++ provides a data structure, the array, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type."
          "\n Instead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables. A specific element in an array is accessed by an index."
          "\n All arrays consist of contiguous memory locations. The lowest address corresponds to the first element and the highest address to the last element."

          "\n\n\n Declaring Arrays: "
          "\n To declare an array in C++, the programmer specifies the type of the elements and the number of elements required by an array as follows −"
          "\n\n type arrayName [ arraySize ]; "
          "\n\n This is called a single-dimension array. The arraySize must be an integer constant greater than zero and type can be any valid C++ data type. For example, to declare a 10-element array called balance of type double, use this statement − "
          "\n\n double balance[10];"

          "\n\n\n Initializing Arrays: "
          "\n You can initialize C++ array elements either one by one or using a single statement as follows −"
          "\n\n double balance[5] = {1000.0, 2.0, 3.4, 17.0, 50.0}; "
          "\n\n The number of values between braces { } can not be larger than the number of elements that we declare for the array between square brackets [ ]. Following is an example to assign a single element of the array − "
          "\n If you omit the size of the array, an array just big enough to hold the initialization is created. Therefore, if you write −"
          "\n\n double balance[] = {1000.0, 2.0, 3.4, 17.0, 50.0}; "
          "\n\n You will create exactly the same array as you did in the previous example. "
          "\n\n balance[4] = 50.0;"

          "\n\n\n Accessing Array Elements:  "
          "\n An element is accessed by indexing the array name. This is done by placing the index of the element within square brackets after the name of the array. For example −"
          "\n\n double salary = balance[9];"
          "\n\n The above statement will take 10th element from the array and assign the value to salary variable. Following is an example, which will use all the above-mentioned three concepts viz. declaration, assignment and accessing arrays − "
          "\n\n int main () {"
          "\n int n[ 10 ]; // n is an array of 10 integers"
          "\n // initialize elements of array n to 0   "
          "\n  for ( int i = 0; i < 10; i++ ) {"
          "\n n[ i ] = i + 100; // set element at location i to i + 100"
          "\n }"
          "\n cout << 'Element' << setw( 13 ) << 'Value' << endl;"
          "\n // output each array element's value  "
          "\n  for ( int j = 0; j < 10; j++ ) {"
          "\n cout << setw( 7 )<< j << setw( 13 ) << n[ j ] << endl;"
          "\n }"
          "\n return 0;"
          "\n }"

          "\n\n\n Arrays in C++:"
          "\n Arrays are important to C++ and should need lots of more detail. There are following few important concepts, which should be clear to a C++ programmer"
          "\n (1)Multi-dimensional arrays:"
          "\n C++ supports multidimensional arrays. The simplest form of the multidimensional array is the two-dimensional array."
          "\n\n (2)Pointer to an array: "
          "\n You can generate a pointer to the first element of an array by simply specifying the array name, without any index."
          "\n\n (3)Passing arrays to functions:"
          "\n You can pass to the function a pointer to an array by specifying the array's name without an index."
          "\n\n (4)Return array from functions: "
          "\n C++ allows a function to return an array."
  ),
  CpAbout(
      question: "String in c++",
      answer: "String is a library function in C++, which helps in performing all the string related operations in the program. And there is a ‘string’ data type that is assigned to a variable containing a set of characters which are surrounded by the double quotations. Any continuous characters assigned to a variable is called String variable. Here, let us see the usage of String data type in C++ programming language."
          "\n\n Syntax: "
          "\n Below is the syntax for the string data type: "
          "\n\n string (data type ) trying (variable) = “Test” (Value assigned to variable) "
          "\n\n Explanation: The texts that are written inside the brackets in the above syntax is regarding how the syntax should actually be understood. According to syntax which is already above, a variable that is represented with the ‘string’ data type becomes the string variable and the string variable is assigned to a value. This part of assigning a variable to its value is called initialization. "
          "\n\n Syntax: "
          "\n\n string (data type) trying_2 (variable) ('Test in another way') à (value assigned to variable);"
          "\n\n In the above representation, the data type and the variable is assigned to the value without the “equal to” assignment operator again using the brackets and quotes. "

          "\n\n\n Rules and Regulations: "
          "\n The main observation that has to be done with respect to the C++ string is that “String” is also a library which deals with any C++ functions."
          "\n\n In C++ two types of string representation format are feasible. One way is by using the “char” data type as used in C programming language and the other is by using the string data type itself. The “char” data type is used with the representation of the array. But it is recommended to use the ‘string’ data type as the ‘char’ array which would be defined is static in nature. If the content value is less than the size of the array represented, then the extra space gets wasted. On the other hand, ‘string’ is dynamic in nature."
          "\n\n One must be careful in assigning and initializing values to “String”. If we are looking at initializing value to string by means of an array that would definitely give us the error. So we need to use the “char” data type for the same. Below is the example for the same:"
          "\n\n Code: "
          "\n\n #include <iostream> "
          "\n using namespace std;"
          "\n int main()"
          "\n {"
          "\n string ex1='example1';"
          "\n string ex2[]='example2';"
          "\n cout<<'The first exxample: '<<ex1<<endl;"
          "\n cout<<'The second example: '<<ex2<<endl;"
          "\n }"
  ),
  CpAbout(
      question: "C++ Classes and Objects",
      answer: "C++ Class Definitions:"
          "\n When you define a class, you define a blueprint for a data type. This doesn't actually define any data, but it does define what the class name means, that is, what an object of the class will consist of and what operations can be performed on such an object."
          "\n A class definition starts with the keyword class followed by the class name; and the class body, enclosed by a pair of curly braces. A class definition must be followed either by a semicolon or a list of declarations. For example, we defined the Box data type using the keyword class as follows −"
          "\n\n class Box {"
          "\n public:"
          "\n double length;  // Length of a box"
          "\n double breadth; // Breadth of a box"
          "\n double height;  // Height of a box"
          "\n };"
          "\n\n The keyword public determines the access attributes of the members of the class that follows it. A public member can be accessed from outside the class anywhere within the scope of the class object. You can also specify the members of a class as private or protected which we will discuss in a sub-section. "

          "\n\n\n Define C++ Objects: "
          "\n A class provides the blueprints for objects, so basically an object is created from a class. We declare objects of a class with exactly the same sort of declaration that we declare variables of basic types. Following statements declare two objects of class Box −"
          "\n\n Box Box1;       // Declare Box1 of type Box "
          "\n Box Box2;         // Declare Box2 of type Box"
          "\n\n Both of the objects Box1 and Box2 will have their own copy of data members. "

          "\n\n\n Classes and Objects in Detail:"
          "\n So far, you have got very basic idea about C++ Classes and Objects. There are further interesting concepts related to C++ Classes and Objects which we will discuss in various sub-sections listed below −"
          "\n\n (1)Class Member Functions: A member function of a class is a function that has its definition or its prototype within the class definition like any other variable."
          "\n\n (2)Class Access Modifiers: A class member can be defined as public, private or protected. By default members would be assumed as private."
          "\n\n (3)Constructor & Destructor: A class constructor is a special function in a class that is called when a new object of the class is created. A destructor is also a special function which is called when created object is deleted."
          "\n\n (4)Copy Constructor: The copy constructor is a constructor which creates an object by initializing it with an object of the same class, which has been created previously."
          "\n\n (5)Friend Functions: A friend function is permitted full access to private and protected members of a class."
          "\n\n (6)Inline Functions: With an inline function, the compiler tries to expand the code in the body of the function in place of a call to the function."
          "\n\n (7)This Pointer: Every object has a special pointer this which points to the object itself."
          "\n\n (8)Pointer to C++ Classes:A pointer to a class is done exactly the same way a pointer to a structure is. In fact a class is really just a structure with functions in it."
          "\n\n (9)Static Members of a Class:Both data members and function members of a class can be declared as static."
  ),
  CpAbout(
      question: "Inheritance in C++",
      answer: "The technique of deriving a new class from an old one is called inheritance. The old class is referred to as base class and the new class is referred to as derived class or subclass. Inheritance concept allows programmers to define a class in terms of another class, which makes creating and maintaining application easier. When writing a new class, instead of writing new data member and member functions all over again, programmers can make a bonding of the new class with the old one that the new class should inherit the members of the existing class. A class can get derived from one or more classes, which means it can inherit data and functions from multiple base classes."
          "\n Here is the syntax how inheritance is performed in C++: "
          "\n\n class derived-class: visibility-mode base-class "
          "\n\n Visibility mode is used in the inheritance of C++ to show or relate how base classes are viewed with respect to derived class. When one class gets inherited from another, visibility mode is used to inherit all the public and protected members of the base class. Private members never get inherited and hence do not take part in visibility. By default, visibility mode remains 'private'. "
          "\n\n Base class and derived class: "
          "\n The existing class from which the derived class gets inherited is known as the base class. It acts as a parent for its child class and all its properties i.e. public and protected members get inherited to its derived class."
          "\n A derived class can be defined by specifying its relationship with the base class in addition to its own details, i.e. members."
          "\n The general form of defining a derived class is:"
          "\n\n class derived-class_name : visivility-mode base-class_name "
          "\n {"
          "\n . . . .  // members of the derived class"
          "\n . . . ."
          "\n };"
          "\n\n\n Types of Inheritance: "
          "\n C++ offers five types of Inheritance. They are:"
          "\n\n • Single Inheritance: "
          "\n In single inheritance, there is only one base class and one derived class. The Derived class gets inherited from its base class. This is the simplest form of inheritance."
          "\n\n • Multiple Inheritance :"
          "\n In this type of inheritance, a single derived class may inherit from two or more base classes."
          "\n\n • Hierarchical Inheritance: "
          "\n In this type of inheritance, multiple derived classes get inherited from a single base class."
          "\n\n • Multilevel Inheritance: "
          "\n The classes can also be derived from the classes that are already derived. This type of inheritance is called multilevel inheritance."
          "\n\n • Hybrid Inheritance (also known as Virtual Inheritance):"
          "\n This is a Mixture of two or More Inheritance and in this Inheritance, a Code May Contains two or Three types of inheritance in Single Code."
  ),
  CpAbout(
      question: "C++ Overloading (Function and Operator)",
      answer: "Types of overloading in C++ are:"
          "\n • Function overloading"
          "\n • Operator overloading"
          "\n\n • C++ Function Overloading: Function Overloading is defined as the process of having two or more function with the same name, but different in parameters is known as function overloading in C++. In function overloading, the function is redefined by using either different types of arguments or a different number of arguments. It is only through these differences compiler can differentiate between the functions."
          "\n The advantage of Function overloading is that it increases the readability of the program because you don't need to use different names for the same action. "
          "\n\n C++ Function Overloading Example:"
          "\n Let's see the simple example of function overloading where we are changing number of arguments of add() method. "
          "\n\n class Cal {"
          "\n static int add(int a,int b){  "
          "\n return a + b; "
          "\n } "
          "\n static int add(int a, int b, int c) "
          "\n {"
          "\n return a + b + c;"
          "\n }"
          "\n };"

          "\n\n\n • C++ Operators Overloading:Operator overloading is a compile-time polymorphism in which the operator is overloaded to provide the special meaning to the user-defined data type. Operator overloading is used to overload or redefines most of the operators available in C++. It is used to perform the operation on the user-defined data type. For example, C++ provides the ability to add the variables of the user-defined data type that is applied to the built-in data types."
          "\n The advantage of Operators overloading is to perform different operations on the same operand."
          "\n\n Operator that cannot be overloaded are as follows: "
          "\n • Scope operator (::)"
          "\n • Sizeof"
          "\n • member selector(.)"
          "\n • member pointer selector(*)"
          "\n • ternary operator(?:)"
          "\n\n Syntax of Operator Overloading: "
          "\n\n return_type class_name  : : operator op(argument_list)"
          "\n {"
          "\n // body of the function."
          "\n }"
          "\n\n Where the return type is the type of value returned by the function. "
          "\n class_name is the name of the class."
          "\n operator op is an operator function where op is the operator being overloaded, and the operator is the keyword."
  ),
  CpAbout(
      question: "Polymorphism in C++",
      answer: "Polymorphism is a feature of OOPs that allows the object to behave differently in different conditions. In C++ we have two types of polymorphism:"
          "\n 1) Compile time Polymorphism: – This is also known as static (or early) binding."
          "\n 2) Runtime Polymorphism: – This is also known as dynamic (or late) binding."

          "\n\n\n 1) Compile time Polymorphism: "
          "\n Function overloading and Operator overloading are perfect example of Compile time polymorphism."
          "\n\n Compile time Polymorphism Example: "
          "\n In this example, we have two functions with same name but different number of arguments. Based on how many parameters we pass during function call determines which function is to be called, this is why it is considered as an example of polymorphism because in different conditions the output is different. Since, the call is determined during compile time thats why it is called compile time polymorphism."
          "\n\n class Add { "
          "\n int sum(int num1, int num2){"
          "\n return num1+num2;"
          "\n }"
          "\n int sum(int num1, int num2, int num3){"
          "\n return num1+num2+num3;"
          "\n }"
          "\n };"

          "\n\n\n 2) Runtime Polymorphism: "
          "\n Function overriding is an example of Runtime polymorphism."
          "\n Function Overriding: When child class declares a method, which is already present in the parent class then this is called function overriding, here child class overrides the parent class."
          "\n In case of function overriding we have two definitions of the same function, one is parent class and one in child class. The call to the function is determined at runtime to decide which definition of the function is to be called, thats the reason it is called runtime polymorphism."
          "\n\n Example of Runtime Polymorphism: "
          "\n\n class A { "
          "\n void disp(){"
          "\n cout<<'Super Class Function'<<endl;"
          "\n }"
          "\n };"
          "\n class B: public A{"
          "\n void disp(){"
          "\n cout<<'Sub Class Function';"
          "\n }"
          "\n };"
  ),
  CpAbout(
      question: "Data Abstraction in C++",
      answer: "• Data Abstraction is a process of providing only the essential details to the outside world and hiding the internal details, i.e., representing only the essential details in the program."
          "\n\n • Data Abstraction is a programming technique that depends on the seperation of the interface and implementation details of the program."
          "\n\n • Let's take a real life example of AC, which can be turned ON or OFF, change the temperature, change the mode, and other external components such as fan, swing. But, we don't know the internal details of the AC, i.e., how it works internally. Thus, we can say that AC seperates the implementation details from the external interface."
          "\n\n • C++ provides a great level of abstraction. For example, pow() function is used to calculate the power of a number without knowing the algorithm the function follows."
          "\n\n In C++ program if we implement class with private and public members then it is an example of data abstraction."
          "\n\n Data Abstraction can be achieved in two ways: "
          "\n\n (1)Abstraction using classes: An abstraction can be achieved using classes. A class is used to group all the data members and member functions into a single unit by using the access specifiers. A class has the responsibility to determine which data member is to be visible outside and which is not. "
          "\n\n (2)Abstraction in header files: An another type of abstraction is header file. For example, pow() function available is used to calculate the power of a number without actually knowing which algorithm function uses to calculate the power. Thus, we can say that header files hides all the implementation details from the user. "
          "\n\n Example: "
          "\n\n class Sum "
          "\n {"
          "\n void add() "
          "\n { "
          "\n ..."
          "\n }"
          "\n };"
          "\n int main() "
          "\n {"
          "\n Sum sm; "
          "\n sm.add();"
          "\n }"
  ),
  CpAbout(
      question: "Encapsulation in C++",
      answer: "In normal terms Encapsulation is defined as wrapping up of data and information under a single unit. In Object Oriented Programming, Encapsulation is defined as binding together the data and the functions that manipulates them."
          "\n\n Consider a real life example of encapsulation, in a company there are different sections like the accounts section, finance section, sales section etc. The finance section handles all the financial transactions and keep records of all the data related to finance. Similarly the sales section handles all the sales related activities and keep records of all the sales. Now there may arise a situation when for some reason an official from finance section needs all the data about sales in a particular month. In this case, he is not allowed to directly access the data of sales section. He will first have to contact some other officer in the sales section and then request him to give the particular data. This is what encapsulation is. Here the data of sales section and the employees that can manipulate them are wrapped under a single name “sales section”."
          "\n\n Encapsulation also lead to data abstraction or hiding. As using encapsulation also hides the data. In the above example the data of any of the section like sales, finance or accounts is hidden from any other section. "
          "\n\n In C++ encapsulation can be implemented using Class and access modifiers. Look at the below program: "
          "\n\n class Encapsulation  "
          "\n {"
          "\n private:  int x; "
          "\n public: void set(int a) {x=a;}"
          "\n int get() {return x;}"
          "\n };"
          "\n\n int main() "
          "\n { "
          "\n  Encapsulation obj; "
          "\n obj.set(5); "
          "\n cout<<obj.get();"
          "\n }"
  ),
];